// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEncoder is a mock of Encoder interface.
type MockEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockEncoderMockRecorder
}

// MockEncoderMockRecorder is the mock recorder for MockEncoder.
type MockEncoderMockRecorder struct {
	mock *MockEncoder
}

// NewMockEncoder creates a new mock instance.
func NewMockEncoder(ctrl *gomock.Controller) *MockEncoder {
	mock := &MockEncoder{ctrl: ctrl}
	mock.recorder = &MockEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncoder) EXPECT() *MockEncoderMockRecorder {
	return m.recorder
}

// IfExistsBase63 mocks base method.
func (m *MockEncoder) IfExistsBase63(url string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IfExistsBase63", url)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IfExistsBase63 indicates an expected call of IfExistsBase63.
func (mr *MockEncoderMockRecorder) IfExistsBase63(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IfExistsBase63", reflect.TypeOf((*MockEncoder)(nil).IfExistsBase63), url)
}

// SaveBase63 mocks base method.
func (m *MockEncoder) SaveBase63(url string, id int64, counter *int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBase63", url, id, counter)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBase63 indicates an expected call of SaveBase63.
func (mr *MockEncoderMockRecorder) SaveBase63(url, id, counter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBase63", reflect.TypeOf((*MockEncoder)(nil).SaveBase63), url, id, counter)
}

// MockDecoder is a mock of Decoder interface.
type MockDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockDecoderMockRecorder
}

// MockDecoderMockRecorder is the mock recorder for MockDecoder.
type MockDecoderMockRecorder struct {
	mock *MockDecoder
}

// NewMockDecoder creates a new mock instance.
func NewMockDecoder(ctrl *gomock.Controller) *MockDecoder {
	mock := &MockDecoder{ctrl: ctrl}
	mock.recorder = &MockDecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDecoder) EXPECT() *MockDecoderMockRecorder {
	return m.recorder
}

// GetBase63 mocks base method.
func (m *MockDecoder) GetBase63(id int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBase63", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBase63 indicates an expected call of GetBase63.
func (mr *MockDecoderMockRecorder) GetBase63(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBase63", reflect.TypeOf((*MockDecoder)(nil).GetBase63), id)
}
